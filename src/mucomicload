#!/usr/bin/env python3
from MUComicLoad.Api import Api
from MUComicLoad.Database import DB
import argparse
import configparser
import os.path
import getpass
import zipfile
from urllib.request import urlopen
import re

def safe_nr(nr):
	if type(nr) is int:
		return '%03d' % nr
	elif type(nr) is str:
		if '.' in nr:
			split = [int(i) for i in nr.split('.')]
			split[0] = "%03d" % split[0]
			return ".".join([str(s) for s in split])
		else:
			return safe_nr(int(nr))
	else:
		print("Unrecognized issue number")
		return str(nr)

def download(api, db, id, filename):
	comic_jpgs = [page['cdnUrls']['jpg_75']['scalar'] for page in
			api.get_issue_by_id(id)['pages'] if page['cdnUrls'] != {}]
	if os.path.isdir(filename):
		issue = db.get_issue(id)
		seriesname = db.get_series(issue[1])[1]
		seriesname_clear = re.sub('[^\w\-_\.\(\) ]', '',seriesname)
		filename = os.path.join(filename,'%s %s.cbz' % (seriesname_clear,
			safe_nr(issue[2])))
	print('Downloading to %s' % filename)
	comiczip = zipfile.ZipFile(filename, mode='w')
	for k, url in enumerate(comic_jpgs):
		image = urlopen(url).read()
		comiczip.writestr('img_%02d.jpg' % k, image)
	comiczip.close()
	

if __name__ == "__main__":
	conf_parser = argparse.ArgumentParser(
			add_help = False
			)
	conf_parser.add_argument("--config", "-c",
				help="Specify config file", metavar="FILE")
	args, remaining_argv = conf_parser.parse_known_args()
	config = configparser.ConfigParser()
	config.add_section("MUComicLoad")
	cfiles = []

	if os.path.isfile("/etc/mucomicload.conf"):
		cfiles.append("/etc/mucomicload.conf")
	if os.path.isfile(os.path.expanduser("~/.config/mucomicload.conf")):
		cfiles.append(os.path.expanduser("~/.config/mucomicload.conf"))
	if args.config and os.path.isfile(args.config):
		cfiles.append(args.config)
	config.set("MUComicLoad", "downloaddir", os.path.realpath("."))	
	config.set("MUComicLoad", "database", os.path.expanduser("~/.mucomics.db"))	
	config.read(cfiles)
	

	parser = argparse.ArgumentParser()
	parser.add_argument("--database", "-db")
	parser.add_argument("--config", "-c")
	subparsers = parser.add_subparsers(dest = 'command')
	initparser = subparsers.add_parser('init')
	initparser = subparsers.add_parser('init')
	searchparser = subparsers.add_parser('search')
	downloadparser = subparsers.add_parser('download')
	updateparser = subparsers.add_parser('update')
	listparser = subparsers.add_parser('list')

	searchparser.add_argument('term')
	downloadparser.add_argument('series')
	downloadparser.add_argument('issue', nargs="+")
	downloadparser.add_argument('--out', '-o',
			default=None)
	updateparser.add_argument('--verbose', '-v', action='count')
	listparser.add_argument('series')

	args = parser.parse_args(remaining_argv)

	db = DB(config['MUComicLoad']['database'])

	if args.command == "search":
		result = db.search_series(args.term)
		for r in result:
			print(r[0])	
	elif args.command == "download":
		while not config.has_option("MUComicLoad", "username"):
			username = input("Username: ")
			config.set("MUComicLoad", "username", username)
		while not config.has_option("MUComicLoad", "password"):
			password = getpass.getpass("Password: ")
			config.set("MUComicLoad", "password", password)
		api = Api(config['MUComicLoad']['username'], config['MUComicLoad']['password'])
		api.connect()
		if args.out:
			config.set("MUComicLoad", "downloaddir", args.out)
		series_id = db.search_series(args.series)[0][1]
		if args.issue == ["all"]:
			args.issue = [i[0] for i in db.get_issue_list(series_id)]
		for issue in args.issue:
			issue_id = db.get_issue_id(series_id, issue)
				try:
			download(api, db, issue_id, config["MUComicLoad"]["downloaddir"])
				except Exception:
					print("Could not get %s #%s" % (db.get_series(series_id)[1], issue))
	elif args.command == "init":
		print("Initializing Database ")
		db.init()
	elif args.command == "update":
		api = Api("arno", "nuem")
		db.update(api, args.verbose)
	elif args.command == "list":
		api = Api("arno", "nuem")
		series = db.search_series(args.series)[0]
		issuelist = db.get_issue_list(series[1])
		for issue in issuelist:
			print ("(" + str(issue[1]) + ") " + series[0] + " #" + issue[0])
